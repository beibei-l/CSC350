// CSC 350
// Beibei Lu
// Homework 1
// Sept 3, 2015


// MacOS, Windows, Linux universal openGL framework
#ifdef __APPLE__
#  include <OpenGL/gl.h>
#  include <OpenGL/glu.h>
#  include <GLUT/glut.h>
#else
#  include <GL/gl.h>
#  include <GL/glu.h>
#  include <GL/glut.h>
#endif

#include <stdlib.h>
#include <math.h>
#include <iostream>

using namespace std;

// global state variables
float length;
float adjustment;
float yPos;
bool animate;

float xCamPos;
float yCamPos;
float zCamPos;

float numNegate;

void init(void)
{
    // define clear color to be black
    glClearColor(0.0, 0.0, 0.0, 0.0);
    
    // shade polygons as flat surfaces
    glShadeModel(GL_FLAT);
    
    // do hidden surface removal
    glEnable (GL_DEPTH_TEST);
    
    // initialize global state
    length = 1.0;
    adjustment = 0.1;
    yPos = 0.0;
    animate = false;
    
    // initial
    xCamPos = 3.0;
    yCamPos = 2.0;
    zCamPos = 3.0;
    
    numNegate = 1.0;
}

void display(void)
{
    // clear frame buffer and depth buffer
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    // set viewpoint
    glLoadIdentity();
    
    // set camera position to initial camera position.
    gluLookAt (xCamPos, yCamPos, zCamPos,     /* eye */
               0.0, 0.0, 0.0,     /* center */
               0.0, 1.0, 0.0);    /* up */
    
    // draw things in the world
    
    glColor3f(0.1, 0.8, 0.3);
    glBegin(GL_LINE_STRIP);
    glVertex2f(0.0, 0.0);
    glVertex2f(numNegate*2.0, numNegate*2.0);
    glEnd();

    // Line strip object
    glColor3f(0.0, 0.4, 0.7);
    glBegin(GL_LINE_STRIP);
    glVertex3f (length/1 ,length/2, length/1);
    glVertex3f (length/2 ,length/3, -length/1);
    glVertex3f ( -length/2, length/3, length/1);
    glVertex3f (length/1 ,length/2, length/3);
    glEnd ();

    // Triangle, no animation.
    glColor3f (0.2, 0.0, 0.6);
    glBegin (GL_POLYGON);
    glVertex3f (2, 1, 1);
    glVertex3f (1, 2, 1);
    glVertex3f (1, 1, 1);
    glEnd ();

    // Another triangle line loop
    glColor3f (1, 0.5, 0.5);
    glBegin (GL_LINE_LOOP);
    glVertex3f (length/2, length/1, length/1);
    glVertex3f (length/2, length/2, length/3);
    glVertex3f (length/1, length/2, length/5);
    glEnd ();
    
    // Triangle line loop
    glColor3f (0.5, 0.5, 1);
    glBegin (GL_LINE_LOOP);
    glVertex3f (length/1, length/1, length/1);
    glVertex3f (length/2, length/1, length/1);
    glVertex3f (length/1, length/2, length/1);
    glEnd ();
    
    // display things
    glutSwapBuffers();
}

void reshape(int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, (GLfloat)w/(GLfloat)h, 0.01, 20.0);
    glMatrixMode(GL_MODELVIEW);
}

void timer(int val)
{
    if (animate)
    {
        // register callback to executer again in .1 seconds
        glutTimerFunc (100,timer,0);
        
        // adjust square length
        length += adjustment;
        
        if (length > 1.5)
        {
            length = 1.5;
            adjustment = -0.1;
        }
        if (length < 0)
        {
            length = 0;
            adjustment = 0.1;
        }
        
        
        // negate the coordinates.
        numNegate = numNegate * -1.0;
        
        // redraw everything
        glutPostRedisplay ();
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch(key) {
        case 27: /* esc */
        case 'Q':
        case 'q':
            exit(0);
            break;
            
        case '+': // increase length
        case '=':
            yPos+= 0.25;
            glutPostRedisplay();
            break;
            
        case '-': // decrease length
            yPos -= 0.25;
            glutPostRedisplay();
            break;
            
        case 'A':
        case 'a':
            // turn animate on/off
            animate = !animate;
            
            // if we just turned it on, then set the timer to go off in .1 seconds
            if (animate)
                glutTimerFunc (100,timer,0);
            break;
            
        case '4':
            // Decrease x value of eye position
            xCamPos -= 0.25;
            glutPostRedisplay();
            break;
            
        case '6':
            // Increase x value of eye position
            xCamPos += 0.25;
            glutPostRedisplay();
            break;
            
        case '2':
            // Decrease y value of eye position
            yCamPos -= 0.25;
            glutPostRedisplay();
            break;
            
        case '8':
            // Increase y value of eye position
            yCamPos += 0.25;
            glutPostRedisplay();
            break;
            
        case '3':
            // Decrease z value of eye position
            zCamPos -= 0.25;
            glutPostRedisplay();
            break;
            
        case '9':
            // Increase z value of eye position
            zCamPos += 0.25;
            glutPostRedisplay();
            break;
            
    }
}

int main(int argc, char** argv)
{
    // initialize glut, create window, etc.
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(100,100);
    glutCreateWindow("Very Simple!");
    
    // initialize program data structures
    init();
    
    // register callbacks
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    
    // do everything!
    glutMainLoop();
    
    return 0;
    
}

